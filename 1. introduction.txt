before the arrival of the frameworks like spring and spring boot, we had servlets and servlet container 
these were the foundations for building web applications 
servlet is a java class which handles the client request, process it and return the response
there are multiple servlets and we need someone which can manage all these servlets 
servlet container are the ones which manages the servlets

working of the servelet technology:
input request goes to the servlet container 
it uses the web.xml file to find the servlet which should be used to serve the request 
then the input request is routed to the particular servlet 
then the response is triggered from the servlet to the container 
then the container fires the response to the client 

web.xml file contains the servlet mapping and other sort of configurations for the servlets 
servlet mapping configures for the servlets which endpoint should be used where 

servlets had a lot of problems which were becoming burden in the path of web applications development
to solve these problems, the spring framework came into the picture

the spring framework solves some of the problems related to servlets:
1. removal of the web.xml file:
-since the file contains all the configurations regarding the application, as the application grows, the file also 
becomes too big and difficult to maintain 
-spring framework brings the annotations based configurations via which configurations can be done in the application 
code itself by the different type of annotations available 

2. inversion of control:
-it is a way more flexible way to manage the object dependencies and its lifecyle
-this is also called dependency injection 
-without dependency injection, there arises issues of tight coupling and spring solves this issue 

3. unit testing is much harder in servlets:
-object creation depends on servlet which makes the unit testing process tough since we now cannot mock 
-concepts like dependency injection makes life easy

4. difficult to manage rest apis in case of servlets:
-for the servlets, writing the APIs is difficult as we can put only one get,put,delete and other type of HTTP methods in a servlet 
-and since we have the large number of end points to handle, we have to use if-else conditions inside the servlets 
-handling things like request parameters, path mapping, query parameters and others, etc. becomes difficult in servlets 

5. other issues:
-spring framework solves other issues like integration with other technologies, securitty concerns, etc and makes 
life easier for the developers 
-unit testing framework like mockito or junit gets easily integrated into the spring, 
data access frameworks hibernate,JDBC,JPA, etc., 
integration with async programming 
integrations with caching, messaging, security 

working of the spring framework / spring MVC : 
bmp 

spring boot framework solves a lot of problems which are there in the spring mvc framework:
1. dependency management:
-as in the spring mvc framework, we write all the dependencies and their versions in the pom.xml file which is a 
configuration file just like the package.jsson file, it is very difficult for us to manage all these dependencies with their exact versions 
-there can be compatibility issues between the versions of the different dependencies and therefore this will create issue 
-spring boot solves this issue as we dont have to define all the dependcies and their versions 

2. auto configuration:
-in spring boot, we dont need to separately configure the dispatcherServlet, appConfig, enableWebMVC, etc. sort of 
things and these configurations happen automatically internally by-default in case of spring boot 

3. embedded server:
-in case of traditional spring MVC application, we used to build manually the WAR files which is a packaged file containing 
the application's classes, JSP pages, configuration files, dependencies and other sort of things needed for the application 
to run 
-then we need to deploy this WAR file to the servlet container like tomcat where our application would run 
-but in case of spring boot, the servlet container is embedded and we dont have to do all this for deploying the application

so, what is spring boot? 
-it is a framework used to create production ready applications (just like nextjs)
-it is based on spring framework (just like nextjs is made upon nodejs)
-it support the concept of "convention over configuration" (just like the nextjs)
-running and deploying an application in this framework is easy as compared to others







