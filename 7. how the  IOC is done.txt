spring IOC container:
-this is the entity which is present in the spring framework and its responsible for creating and managing the objects 
-in short, this is responsible for the IOC part of the spring framework
-assume it like a container which contains all component annotated objects of the application 

annotations used while implementing IOC using the spring IOC container:
-@Component: 
-we write this annotation for all the classes whose objects we want to automatically create in the spring IOC container 
when the application runs 
-all the objects includes both the dependent and independent objects
 
-@Autowired:
-we write this annotation for the setter function inside the dependent class which is responsible for injecting 
the independent objects into the dependent one 
-by writing this annotation, the IOC container gets to know, that when the application code runs, its need to automatically 
inject the object dependcies using this setter function

-@componentscan:
-used to mention the package from which the component marked objects should be created into the spring IOC container 
for further IOC process

-@configuration:
-we write this annotation for the class which we want to make the spring bean configuration class for the application.
-we inject this class into the context while creating the spring IOC containe 
-when the application code runs and the container is created, it looks for the injected class which is marked with the configuration annotation 
-looks for the class and finds the component scan annotation which has the mention of the package from which the objects 
should be created into the IOC container 
-looks into the component scan annotation and finds the mentioned package, creates all the objects which are marked in the 
package with the component annotation into the IOC container 
-while creating the objects, it also looks for the dependencies and also resolves the dependencies automatically 
using the setter function, annotated by the autowired annotation
-since the objects are created and the dependencies are resolved, the objects are now ready to use and now we can use 
them in the application code

concept of spring boot beans:
-since the above mentioned ready to use objects are created and managed by the spring framework, these are called the 
spring boot beans 
-bean is simply a java class object which the spring boot framework creates and manages for you and it is created 
by the spring IOC container
-there are many methods of creating beans and one of them is the component scanning mechanism which we have discussed 
above 
-other methods includes java configuration or writing XML files but these are not needed for now 

how to create the container for IOC:
-see the code for the reference 
-after the creation of the container, we have all the objects in it which are beans 

how to get the bean from the container:
-see the code for the reference
-we use the getBean() method for getting the bean from the container 
-after getting the bean, we can use it 







